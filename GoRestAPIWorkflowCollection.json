{
	"info": {
		"_postman_id": "a758cd44-f893-48a7-a02b-4daa0295a956",
		"name": "GoRestAPIWorkflow",
		"description": "**Environment:** GoRestEnv\n\n**For Token:**\n\n- Open \"[https://gorest.co.in/my-account/access-tokens](https://gorest.co.in/my-account/access-tokens)\" > Login with any account\n    \n- Copy the Access Tokens > Paste in Env and Run the Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38717240",
		"_collection_link": "https://chakri-8667.postman.co/workspace/ChakriCollections~bdd43e77-cb7a-4f7f-9722-d9e4b19cab74/collection/38717240-a758cd44-f893-48a7-a02b-4daa0295a956?action=share&source=collection_link&creator=38717240"
	},
	"item": [
		{
			"name": "1_GetAllUsers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// Check the Status code 200:\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{tokenID}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}/public/v2/users/",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"public",
						"v2",
						"users",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "2_CreateAUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"const user_id = response.id;\r",
							"console.log(\"User ID ==> \" +user_id);\r",
							"\r",
							"// Local variable -> LDECG\r",
							"pm.variables.set(\"userID\", user_id);\r",
							"\r",
							"\r",
							"// Testcase: Check the Status code 201\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// Testcase: Check Username is Chakri\r",
							"pm.test(\"Check Username is Chakri\", function () {\r",
							"    pm.expect(response.name).to.eql(\"Chakri\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{tokenID}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Chakri\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"chakri{{$randomLastName}}@api.com\",\r\n    \"status\": \"active\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/public/v2/users/",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"public",
						"v2",
						"users",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "3_GetAUserByID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Testcase: Check the Status code 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check User ID is correct:\", function(){\r",
							"    const newUserID = pm.variables.get(\"userID\");\r",
							"    console.log(\"New userID is: \"+newUserID);\r",
							"    \r",
							"    const response = pm.response.json();\r",
							"    console.log(\"Resonse ID: \"+response.id);\r",
							"    pm.expect(response.id).to.eql(newUserID);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{tokenID}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}/public/v2/users/{{userID}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"public",
						"v2",
						"users",
						"{{userID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "4_UpdateAUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Testcase: Check the Status code 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 5000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"pm.test(\"Check Status is correct:\", function(){\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response.status).to.eql(\"inactive\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "{{tokenID}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"status\": \"inactive\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/public/v2/users/{{userID}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"public",
						"v2",
						"users",
						"{{userID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "5_DeleteAUserbyID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Testcase: Check the Status code 204\r",
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "{{tokenID}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}/public/v2/users/{{userID}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"public",
						"v2",
						"users",
						"{{userID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "6_GetAUserByID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Testcase: Check the Status code 404\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{tokenID}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/public/v2/users/{{userID}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"public",
						"v2",
						"users",
						"{{userID}}"
					]
				}
			},
			"response": []
		}
	]
}